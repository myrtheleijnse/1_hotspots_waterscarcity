#make data frame area and add columns
df <- do.call(rbind.data.frame, area_list)
colnames(df) <- c("value")
df$year = c(seq(2001, 2010, 1))
df$year <- format(strptime(df$year, "%Y"), format = "%Y")
df$Variable <- variable
df$unit <- "km2"
df$hotspot <- names(shp[shpcount])
df$value.ref <- df$value
#compare to reference year (2001)
for (i in 1:nrow(df)){
df$value.ref[i] <- df$value[i]/df$value[1]
}
return(df)
}
df_croplandarea <- nc_to_df_area(shp_list, 2, "Indicators/LandUse/MODIS_2001_2010/MODIS-C006_MCD12C1_landcover__LPDAAC__0.05deg_fv0.02.nc4",
"landcover_igbp", "Cropland area", 12)
View(df_croplandarea)
#calculating area of land use class
area_list <- list()
for (i in 1:nlayers(clip)) {
area <- clip[[i]]
area[area < class] <- NA
area[area > class] <- NA
cellsize <- area(area, na.rm=T, weights=F)
cellsize <- cellsize[!is.na(cellsize)]
area_list[[i]] <- length(cellsize)*median(cellsize) # in km2
}
#make data frame area and add columns
df <- do.call(rbind.data.frame, area_list)
df
colnames(df) <- c("value")
df$year = as.numeric(format(strptime(getZ(clip), "%Y-%m-%d"), format = "%Y"))
View(df)
df$variable <- variable
df$unit <- "km2"
df$hotspot <- names(shp[shpcount])
View(df)
df$value.ref <- df$value
#compare to reference year (2001)
for (i in 1:nrow(df)){
df$value.ref[i] <- df$value[i]/df$value[1]
}
df_urbanarea <- nc_to_df_area(shp_list, 2, "Indicators/LandUse/MODIS_2001_2010/MODIS-C006_MCD12C1_landcover__LPDAAC__0.05deg_fv0.02.nc4",
"landcover_igbp", "Urban area", 13)
View(df_urbanarea)
for(i in 2:length(shp_list)){
df <- nc_to_df_area(shp_list, i, "Indicators/LandUse/MODIS_2001_2010/MODIS-C006_MCD12C1_landcover__LPDAAC__0.05deg_fv0.02.nc4",
"landcover_igbp", "Cropland area", 12)
df_croplandarea <- rbind(df_croplandarea, df)
}
### Execution ###
df_croplandarea <- nc_to_df_area(shp_list, 1, "Indicators/LandUse/MODIS_2001_2010/MODIS-C006_MCD12C1_landcover__LPDAAC__0.05deg_fv0.02.nc4",
"landcover_igbp", "Cropland area", 12)
for(i in 2:length(shp_list)){
df <- nc_to_df_area(shp_list, i, "Indicators/LandUse/MODIS_2001_2010/MODIS-C006_MCD12C1_landcover__LPDAAC__0.05deg_fv0.02.nc4",
"landcover_igbp", "Cropland area", 12)
df_croplandarea <- rbind(df_croplandarea, df)
}
df_urbanarea <- nc_to_df_area(shp_list, 1, "Indicators/LandUse/MODIS_2001_2010/MODIS-C006_MCD12C1_landcover__LPDAAC__0.05deg_fv0.02.nc4",
"landcover_igbp", "Urban area", 13)
for(i in 2:length(shp_list)){
df <- nc_to_df_area(shp_list, i, "Indicators/LandUse/MODIS_2001_2010/MODIS-C006_MCD12C1_landcover__LPDAAC__0.05deg_fv0.02.nc4",
"landcover_igbp", "Urban area", 13)
df_urbanarea <- rbind(df_urbanarea, df)
}
for(i in 18:length(shp_list)){
df <- nc_to_df_area(shp_list, i, "Indicators/LandUse/MODIS_2001_2010/MODIS-C006_MCD12C1_landcover__LPDAAC__0.05deg_fv0.02.nc4",
"landcover_igbp", "Urban area", 13)
df_urbanarea <- rbind(df_urbanarea, df)
}
shpcount = 18
class = 13
variable = "Urban area"
raster <- brick(file, varname = varname)
clip <- mask(crop(raster, extent(shp[[shpcount]])), shp[[shpcount]])
plot(clip)
#calculating area of land use class
area_list <- list()
for (i in 1:nlayers(clip)) {
area <- clip[[i]]
area[area < class] <- NA
area[area > class] <- NA
cellsize <- area(area, na.rm=T, weights=F)
cellsize <- cellsize[!is.na(cellsize)]
area_list[[i]] <- length(cellsize)*median(cellsize) # in km2
}
#make data frame area and add columns
df <- do.call(rbind.data.frame, area_list)
barplot(clip)
barplot(clip[[1]])
barplot(clip[[2]])
barplot(clip[[3]])
barplot(clip[[10]])
i = 1
area <- clip[[i]]
area[area < class] <- NA
area[area > class] <- NA
area
plot(area)
cellsize <- area(area, na.rm=T, weights=F)
cellsize
cellsize <- cellsize[!is.na(cellsize)]
area_list[[i]] <- length(cellsize)*median(cellsize) # in km2
length(cellsize)
for (i in 1:nlayers(clip)) {
area <- clip[[i]]
area[area < class] <- NA
area[area > class] <- NA
cellsize <- area(area, na.rm=T, weights=F)
if(cellsize == 0){
area_list[[i]] <- 0
} else{
cellsize <- cellsize[!is.na(cellsize)]
area_list[[i]] <- length(cellsize)*median(cellsize) # in km2
}
}
for (i in 1:nlayers(clip)) {
area <- clip[[i]]
area[area < class] <- NA
area[area > class] <- NA
cellsize <- area(area, na.rm=T, weights=F)
if(cellsize = 0){
length(cellsize)
area <- clip[[i]]
area[area < class] <- NA
area[area > class] <- NA
cellsize <- area(area, na.rm=T, weights=F)
length(cellsize)
cellsize <- cellsize[!is.na(cellsize)]
length(cellsize)
if(length(cellsize) == 0){
area_list[[i]] <- 0
} else {
area_list[[i]] <- length(cellsize)*median(cellsize) # in km2
}
area_list[[1]]
for (i in 1:nlayers(clip)) {
area <- clip[[i]]
area[area < class] <- NA
area[area > class] <- NA
cellsize <- area(area, na.rm=T, weights=F)
cellsize <- cellsize[!is.na(cellsize)]
if(length(cellsize) == 0){
area_list[[i]] <- 0
} else {
area_list[[i]] <- length(cellsize)*median(cellsize) # in km2
}
}
#make data frame area and add columns
df <- do.call(rbind.data.frame, area_list)
df
df$year = as.numeric(format(strptime(getZ(clip), "%Y-%m-%d"), format = "%Y"))
df$variable <- variable
df$unit <- "km2"
df$hotspot <- names(shp[shpcount])
df$value.ref <- df$value
#compare to reference year (2001)
for (i in 1:nrow(df)){
df$value.ref[i] <- df$value[i]/df$value[1]
}
df
### Functions ###
nc_to_df_area <- function(shp, shpcount, file, varname, variable, class){
raster <- brick(file, varname = varname)
clip <- mask(crop(raster, extent(shp[[shpcount]])), shp[[shpcount]])
plot(clip)
#calculating area of land use class
area_list <- list()
for (i in 1:nlayers(clip)) {
area <- clip[[i]]
area[area < class] <- NA
area[area > class] <- NA
cellsize <- area(area, na.rm=T, weights=F)
cellsize <- cellsize[!is.na(cellsize)]
if(length(cellsize) == 0){
area_list[[i]] <- 0
} else {
area_list[[i]] <- length(cellsize)*median(cellsize) # in km2
}
}
#make data frame area and add columns
df <- do.call(rbind.data.frame, area_list)
colnames(df) <- c("value")
df$year = as.numeric(format(strptime(getZ(clip), "%Y-%m-%d"), format = "%Y"))
df$variable <- variable
df$unit <- "km2"
df$hotspot <- names(shp[shpcount])
df$value.ref <- df$value
#compare to reference year (2001)
for (i in 1:nrow(df)){
df$value.ref[i] <- df$value[i]/df$value[1]
}
return(df)
}
df_urbanarea <- landuse_2001_2010(shp_list[[1]], landuse_2001_2010.array, t, lon, lat, "Urban area", 13)
df_urbanarea <- nc_to_df_area(shp_list, 1, "Indicators/LandUse/MODIS_2001_2010/MODIS-C006_MCD12C1_landcover__LPDAAC__0.05deg_fv0.02.nc4",
"landcover_igbp", "Urban area", 13)
for(i in 2:length(shp_list)){
df <- nc_to_df_area(shp_list, i, "Indicators/LandUse/MODIS_2001_2010/MODIS-C006_MCD12C1_landcover__LPDAAC__0.05deg_fv0.02.nc4",
"landcover_igbp", "Urban area", 13)
df_urbanarea <- rbind(df_urbanarea, df)
}
### Write CSV ###
write.csv(df_croplandarea, "Indicators/Indicator_tables/MODIS_croplandarea_2001_2010.csv", row.names=F)
write.csv(df_croplandarea, "Indicators/Indicator_tables/MODIS_croplandarea_2001_2010.csv", row.names=F)
### Libraries ###
library(raster)
library(ncdf4)
library(sf)
library(lubridate)
library(ggplot2)
### Directory ###
setwd("E:/1_hotspots_waterscarcity/data")
### Functions ###
nc_to_df_area <- function(shp, shpcount, file, varname, variable, class){
raster <- brick(file, varname = varname)
clip <- mask(crop(raster, extent(shp[[shpcount]])), shp[[shpcount]])
plot(clip)
#calculating area of land use class
area_list <- list()
for (i in 1:nlayers(clip)) {
area <- clip[[i]]
area[area < class] <- NA
area[area > class] <- NA
cellsize <- area(area, na.rm=T, weights=F)
cellsize <- cellsize[!is.na(cellsize)]
if(length(cellsize) == 0){
area_list[[i]] <- 0
} else {
area_list[[i]] <- length(cellsize)*median(cellsize) # in km2
}
}
#make data frame area and add columns
df <- do.call(rbind.data.frame, area_list)
colnames(df) <- c("value")
df$year = as.numeric(format(strptime(getZ(clip), "%Y-%m-%d"), format = "%Y"))
df$variable <- variable
df$unit <- "km2"
df$hotspot <- names(shp[shpcount])
df$value.ref <- df$value
#compare to reference year (2001)
for (i in 1:nrow(df)){
df$value.ref[i] <- df$value[i]/df$value[1]
}
return(df)
}
### Execution ###
df_croplandarea <- nc_to_df_area(shp_list, 1, "Indicators/LandUse/MODIS_2001_2010/MODIS-C006_MCD12C1_landcover__LPDAAC__0.05deg_fv0.02.nc4",
"landcover_igbp", "Cropland area", 12)
setwd("E:/1_waterscarcity_hotspots/Data")
shp <- st_read("Water_provinces/Hotspot_Shapefiles/California.shp")
ff <- list.files("Water_provinces/Hotspot_Shapefiles/", pattern="\\.shp$", full.names=T)
shp_list <- lapply(ff, shapefile)
hotspots <- c("Irrawaddy", "California", "ChaoPhraya", "Chile", "China", "Euphrates", "Ganges", "Indus", "Japan", "Java", "Jordan",
"Mekong", "Mexico", "MurrayDarling", "Nile", "Rhine", "Spain", "Sudan", "USHighPlains")
names(shp_list) = hotspots
### Functions ###
nc_to_df_area <- function(shp, shpcount, file, varname, variable, class){
raster <- brick(file, varname = varname)
clip <- mask(crop(raster, extent(shp[[shpcount]])), shp[[shpcount]])
plot(clip)
#calculating area of land use class
area_list <- list()
for (i in 1:nlayers(clip)) {
area <- clip[[i]]
area[area < class] <- NA
area[area > class] <- NA
cellsize <- area(area, na.rm=T, weights=F)
cellsize <- cellsize[!is.na(cellsize)]
if(length(cellsize) == 0){
area_list[[i]] <- 0
} else {
area_list[[i]] <- length(cellsize)*median(cellsize) # in km2
}
}
#make data frame area and add columns
df <- do.call(rbind.data.frame, area_list)
colnames(df) <- c("value")
df$year = as.numeric(format(strptime(getZ(clip), "%Y-%m-%d"), format = "%Y"))
df$variable <- variable
df$unit <- "km2"
df$hotspot <- names(shp[shpcount])
df$value.ref <- df$value
#compare to reference year (2001)
for (i in 1:nrow(df)){
df$value.ref[i] <- df$value[i]/df$value[1]
}
return(df)
}
### Execution ###
df_croplandarea <- nc_to_df_area(shp_list, 1, "Indicators/LandUse/MODIS_2001_2010/MODIS-C006_MCD12C1_landcover__LPDAAC__0.05deg_fv0.02.nc4",
"landcover_igbp", "Cropland area", 12)
for(i in 2:length(shp_list)){
df <- nc_to_df_area(shp_list, i, "Indicators/LandUse/MODIS_2001_2010/MODIS-C006_MCD12C1_landcover__LPDAAC__0.05deg_fv0.02.nc4",
"landcover_igbp", "Cropland area", 12)
df_croplandarea <- rbind(df_croplandarea, df)
}
df_urbanarea <- nc_to_df_area(shp_list, 1, "Indicators/LandUse/MODIS_2001_2010/MODIS-C006_MCD12C1_landcover__LPDAAC__0.05deg_fv0.02.nc4",
"landcover_igbp", "Urban area", 13)
for(i in 2:length(shp_list)){
df <- nc_to_df_area(shp_list, i, "Indicators/LandUse/MODIS_2001_2010/MODIS-C006_MCD12C1_landcover__LPDAAC__0.05deg_fv0.02.nc4",
"landcover_igbp", "Urban area", 13)
df_urbanarea <- rbind(df_urbanarea, df)
}
df_croplandarea_2 <- read.csv("Indicators/Indicator_tables/croplandarea_2001_2010.csv")
df_croplandarea_2 <- read.csv("Indicators/Indicator_tables/MODIS_croplandarea_2001_2010.csv")
df_urbanarea_2 <- read.csv("Indicators/Indicator_tables/MODIS_urbanlandarea_2001_2010.csv")
write.csv(df_croplandarea, "Indicators/Indicator_tables/MODIS_urbanarea_2001_2010.csv", row.names=F)
df_urbanarea_2 <- read.csv("Indicators/Indicator_tables/MODIS_urbanarea_2001_2010.csv")
View(df_croplandarea)
View(df_croplandarea_2)
View(df_urbanarea)
View(df_urbanarea_2)
write.csv(df_urbanarea, "Indicators/Indicator_tables/MODIS_urbanarea_2001_2010.csv", row.names=F)
df_urbanarea_2 <- read.csv("Indicators/Indicator_tables/MODIS_urbanarea_2001_2010.csv")
View(df_urbanarea_2)
relative_spaghetti_plot(df_croplandarea,
"Cropland area (km2)",
"Annual total cropland area per hotspot",
"Relative cropland area",
"Annual cropland area per hotspot relative to ",
2001, 2010)
### Functions ###
relative_spaghetti_plot <- function(df, ylab_abs, title_abs, ylab_rel, title_rel, startyear, endyear) {
grid.arrange(
ggplot(df, aes(year, value, group=hotspot, colour = hotspot)) +
geom_line(lwd=1.5) +
gghighlight(max(value)>-2) +
scale_color_viridis_d(option = "H") +
scale_x_discrete(breaks=seq(startyear, endyear, 2)) +
ylab(ylab_abs) +
ggtitle(title_abs) +
theme_ipsum(axis_title_size = 12),
ggplot(df, aes(year, value.ref, group=hotspot, colour = hotspot)) +
geom_line(lwd=1.5) +
gghighlight(max(value)>-2) +
scale_color_viridis_d(option = "H") +
scale_x_discrete(breaks=seq(2001, 2010, 2)) +
ylab(ylab_rel) +
ggtitle(paste0(title_rel, startyear)) +
theme_ipsum(axis_title_size = 12),
nrow = 1
)
}
relative_spaghetti_plot(df_croplandarea,
"Cropland area (km2)",
"Annual total cropland area per hotspot",
"Relative cropland area",
"Annual cropland area per hotspot relative to ",
2001, 2010)
relative_spaghetti_plot(df_urbanarea,
"Urban area (km2)",
"Annual total urban area per hotspot",
"Relative urban area",
"Annual urban area per hotspot relative to ",
2001, 2010)
### Execution ###
brick("/PCRGLOB_05minbenchmark_global/fossilGroundwaterAbstraction_annuaTot_output.nc")
library(ncdf4)
### Execution ###
brick("/PCRGLOB_05minbenchmark_global/fossilGroundwaterAbstraction_annuaTot_output.nc")
nc_open("/PCRGLOB_05minbenchmark_global/fossilGroundwaterAbstraction_annuaTot_output.nc")
nc_open("PCRGLOB_05minbenchmark_global/fossilGroundwaterAbstraction_annuaTot_output.nc")
### Execution ###
brick("PCRGLOB_05minbenchmark_global/fossilGroundwaterAbstraction_annuaTot_output.nc")
### Execution ###
plot(brick("PCRGLOB_05minbenchmark_global/fossilGroundwaterAbstraction_annuaTot_output.nc"))
### Functions ###
nc_to_array <- function(ncfile, ncvariable){
nc_data <- nc_open(ncfile)
array <- ncvar_get(nc_data, ncvariable)
nc_close(nc_data)
return(array)
}
nc_t <- function(ncfile){
nc_data <- nc_open(ncfile)
t <- ncvar_get(nc_data, "time")
nc_close(nc_data)
return(t)
}
nc_lon <- function(ncfile){
nc_data <- nc_open(ncfile)
lon <- ncvar_get(nc_data, "lon")
nc_close(nc_data)
return(lon)
}
nc_lat <- function(ncfile){
nc_data <- nc_open(ncfile)
lat <- ncvar_get(nc_data, "lat", verbose = F)
nc_close(nc_data)
return(lat)
}
slice_to_raster <- function(slice){
r <- raster(t(slice), xmn=min(lon), xmx=max(lon), ymn=min(lat), ymx=max(lat) ,
crs=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs+ towgs84=0,0,0"))
r <- flip(r, direction="y")
return(r)
}
watergap_raster_2010_2019 <- function(array, t, lon, lat, variable) {
slice2010 <- slice_to_raster(array[,,30])
slice2011 <- slice_to_raster(array[,,31])
slice2012 <- slice_to_raster(array[,,32])
slice2013 <- slice_to_raster(array[,,34])
slice2014 <- slice_to_raster(array[,,35])
slice2015 <- slice_to_raster(array[,,36])
slice2016 <- slice_to_raster(array[,,37])
slice2017 <- slice_to_raster(array[,,38])
slice2018 <- slice_to_raster(array[,,39])
slice2019 <- slice_to_raster(array[,,40])
#stack
raster <- stack(slice2010, slice2011, slice2012, slice2013, slice2014, slice2015, slice2016, slice2017, slice2018, slice2019)
names(raster) <- c(sprintf(paste0(variable," %d"),seq(2010, 2019, 1)))
#mean 2010-2019 watergap
raster_mean <- calc(raster, fun = mean, na.rm = T)
return(raster_mean)
}
### Reading Data ###
watergap.array <- nc_to_array("WSI/totalWaterGap_annuaTot.nc", "total_gross_demand")
t <- nc_t("WSI/totalWaterGap_annuaTot.nc")
lon <- nc_lon("WSI/totalWaterGap_annuaTot.nc")
lat <- nc_lat("WSI/totalWaterGap_annuaTot.nc")
### Execution ###
watergap_mean <- watergap_raster_2010_2019(watergap.array, t, lon, lat, "Water gap")
plot(watergap_mean)
watergap_raster <- brick("WSI/totalWaterGap_annuaTot.nc")
plot(watergap_raster)
fossilgw_raster <- brick("PCRGLOB_05minbenchmark_global/fossilGroundwaterAbstraction_annuaTot_output.nc")
plot(fossilgw_raster)
plot(fossilgw_raster[[1]])
plot(watergap_raster[[1 + fossilgw_raster[[1]])
plot(watergap_raster[[1]] + fossilgw_raster[[1]])
length(watergap_raster)
nlayer(watergap_raster)
nlayers(watergap_raster)
for (i in nlayers(watergap_raster)){
fossilwatergap[[i]] <- watergap_raster[[i]] + fossilgw_raster[[i]]
}
for (i in 1:nlayers(watergap_raster)){
fossilwatergap_raster[[i]] <- watergap_raster[[i]] + fossilgw_raster[[i]]
fossilwatergap <- append(fossilwatergap, fossilwatergap_raster)
}
fossilwatergap_raster[[1]] <- watergap_raster[[1]] + fossilgw_raster[[1]]
fossilwatergap_raster <- watergap_raster[[1]] + fossilgw_raster[[1]]
for (i in 1:nlayers(watergap_raster)){
fossilwatergap_raster <- watergap_raster[[i]] + fossilgw_raster[[i]]
fossilwatergap <- append(fossilwatergap, fossilwatergap_raster)
}
fossilwatergap <- watergap_raster[[1]] + fossilgw_raster[[1]]
for (i in 1:nlayers(watergap_raster)){
fossilwatergap_raster <- watergap_raster[[i]] + fossilgw_raster[[i]]
fossilwatergap <- append(fossilwatergap, fossilwatergap_raster)
}
cellStats(fossilwatergap[[1]], sum)
cellStats(watergap[[1]], sum)
cellStats(watergap_raster[[1]], sum)
cellStats(fossilgw_raster[[1]], sum)
cellStats(fossilgw_raster[[1]], sum) + cellStats(watergap_raster[[1]], sum)
cellStats(fossilgw_raster[[5]], sum) + cellStats(watergap_raster[[5]], sum)
cellStats(fossilwatergap[[1]], sum)
cellStats(fossilwatergap[[5]], sum)
fossilwatergap <- watergap_raster[[1]] + fossilgw_raster[[1]]
for (i in 2:nlayers(watergap_raster)){
fossilwatergap_raster <- watergap_raster[[i]] + fossilgw_raster[[i]]
fossilwatergap <- append(fossilwatergap, fossilwatergap_raster)
}
test <- fossilwatergap[[31]]:fossilwatergap[[40]]
test <- fossilwatergap[[31:40]]
nlayers(fossilwatergap)
length(fossilwatergap)
plot(fossilwatergap[1])
plot(fossilwatergap[[1]])
plot(fossilwatergap)
plot(fossilwatergap[[2]])
View(fossilwatergap)
names(fossilwatergap) <- seq(1980, 2019, 1)
fossilwatergap
View(fossilwatergap)
class(names(fossilwatergap))
test <- fossilwatergap[c(as.character(seq(1980,2019,1)))]
View(test)
test <- fossilwatergap[c(as.character(seq(2010,2019,1)))]
View(test)
plot(watergap_raster[[1]])
test <- stack(watergap_raster[[1]], watergap_raster[[2]])
plot(test)
test2 <- stack(test, watergap_raster[[3]])
plot(test2)
fossilwatergap <- watergap_raster[[1]] + fossilgw_raster[[1]]
for (i in 2:nlayers(watergap_raster)){
fossilwatergap_raster <- watergap_raster[[i]] + fossilgw_raster[[i]]
fossilwatergap <- stack(fossilwatergap, fossilwatergap_raster)
}
plot(fossilwatergap)
nlayer(fossilwatergap)
nlayers(fossilwatergap)
names(fossilwatergap) <- seq(1980, 2019, 1)
plot(fossilwatergap)
fossilwatergap_2010_2019 <- fossilwatergap[[31:40]]
plot(fossilwatergap_2010_2019)
fossilwatergap_mean <- calc(fossilwatergap_2010_2019, fun = mean, na.rm = T)
plot(fossilwatergap_mean)
writeRaster(x = watergap_mean, filename = "WSI/RastersForGIS/fossilwatergap_mean.tif", driver = "GeoTiff")
# Fossil groundwater abstraction
calc(fossilgw_raster[[31:40]], fun = mean, na.rm = T)
# Fossil groundwater abstraction
fossilabs_mean <- calc(fossilgw_raster[[31:40]], fun = mean, na.rm = T)
plot(fossilabs_mean)
writeRaster(x = fossilabs_mean, filename = "WSI/RastersForGIS/fossilabs_mean.tif", driver = "GeoTiff")
writeRaster(x = fossilwatergap_mean, filename = "WSI/RastersForGIS/fossilwatergap_mean.tif", driver = "GeoTiff")
writeRaster(x = fossilwatergap_mean, filename = "WSI/RastersForGIS/fossilwatergap_mean.tif", driver = "GeoTiff", overwrite=T)
writeRaster(x = fossilwatergap_mean, filename = "WSI/RastersForGIS/fossilwatergap_mean.tif", driver = "GeoTiff", overwrite=T)
