)
pressures <- c(
"Tourism", "Agri water use", "Ecosystem water demand", "Total water use",
"Domestic water demand", "Crop change/intensification", "Urbanization", "Mining",
"Industrial water use", "Livestock water use", "Virtual water trade", "Aquaculture",
"Forestry", "Horticulture"
)
states <- c(
"Water use per capita", "GW depletion", "Contamination",
"Overallocation of surface water", "Low water storage capacity", "Salinization"
)
impacts <- c(
"Fallowing acreage", "Subsidence", "Reduced hydroelectricity production", "Damage to ecosystems",
"Reduced food production", "Conflict", "Health", "Costs (pumping/energy)", "High GHG emissions",
"Water collection", "Migration"
)
responses <- c(
"RGW (+)", "URGW (-)", "WI (+)", "WI (-)", "IWUE (+)", "IWUE (-)", "WC (+)", "WC(-)", "WRe (+)",
"WRe (-)", "DC (+)", "DC (-)", "WP (+)", "WP (-)", "DP (+)", "DP(-)", "Wri (+)", "Wri (-)",
"SRP (+)", "SRP (-)", "GTW (+)", "UGTW (-)", "PT (+)", "PT (-)"
)
# functions reading xlsx
# TODO: make one universal function; assumptions - regions
obtain_drivers <- function(drivers, region) {
driver_region <- driver_sheet[driver_sheet$Hotspot == region, ]
col_drivers <- driver_region[, drivers]
col_drivers[is.na(col_drivers)] <- 0.0
values <- unname(colSums(col_drivers[, drivers]))
DPSIR <- "driver"
df_driver <- cbind(region, DPSIR, drivers, data.frame(values))
names(df_driver)[names(df_driver) == "drivers"] <- "indicator"
return(df_driver)
}
region = "California"
df_driver <- obtain_drivers(drivers, region)
View(df_driver)
### Functions ###
obtain_indicator <- function(sheet, indicator_list, indicator_name_string_singular, indicator_name_string_plural) {
sheet_region <- sheet[sheet$Hotspot == region, ]
col_region <- sheet_region[, indicator_list]
col_region[is.na(col_region)] <- 0.0
values <- unname(colSums(col_region[, indicator_list]))
DPSIR <- indicator_name_string_singular
df <- cbind(region, DPSIR, indicator_list, data.frame(values))
names(df)[names(df) == indicator_name_string_plural] <- "indicator"
return(df)
}
df_driver <- obtain_indicator(driver_sheet, drivers, "driver", "drivers")
View(df_driver)
### Functions ###
obtain_indicator <- function(sheet, indicator_list, indicator_name_string_singular, indicator_name_string_plural) {
sheet_region <- sheet[sheet$Hotspot == region, ]
col_region <- sheet_region[, indicator_list]
col_region[is.na(col_region)] <- 0.0
values <- unname(colSums(col_region[, indicator_list]))
DPSIR <- indicator_name_string_singular
df <- cbind(region, DPSIR, indicator_list, data.frame(values))
names(df)[names(df) == "indicator_list"] <- "indicator"
return(df)
}
df_driver <- obtain_indicator(driver_sheet, drivers, "driver", "drivers")
hotspots_list <- read_excel("./raw/DPSIR/DPSIR_analysis.xlsx", sheet = "Driver", range = cell_cols(c("Hotspot")))
View(hotspots_list)
hotspots_list <- read_excel("./raw/DPSIR/DPSIR_analysis.xlsx", sheet = "Driver", colIndex=2)
hotspots_list <- read_excel("./raw/DPSIR/DPSIR_analysis.xlsx", sheet = "Driver", colIndex=1:2)
hotspots_list <- read.xlsx("./raw/DPSIR/DPSIR_analysis.xlsx", sheet = "Driver", colIndex=2)
library(xlsx)
install.packages("xlsx")
library(xlsx)
hotspots_list <- read.xlsx("./raw/DPSIR/DPSIR_analysis.xlsx", sheet = "Driver", colIndex=2)
hotspots_list <- read.xlsx("./raw/DPSIR/DPSIR_analysis.xlsx", "Driver", colIndex=2)
hotspots_list
hotspots_list <- unique(read.xlsx("./raw/DPSIR/DPSIR_analysis.xlsx", "Driver", colIndex=2))
hotspots_list
hotspots_list <- unique(read.xlsx("./raw/DPSIR/DPSIR_analysis.xlsx", "Driver", colIndex=2, rm.na=T))
hotspots_list
hotspots_list <- unique(read.xlsx("./raw/DPSIR/DPSIR_analysis.xlsx", "Driver", colIndex=2))
hotspots_list <- as.list(unique(read.xlsx("./raw/DPSIR/DPSIR_analysis.xlsx", "Driver", colIndex=2)))
hotspots_list
### Reading Data ###
driver_sheet <- read_excel("./raw/DPSIR/DPSIR_analysis.xlsx", sheet = "Driver", range = cell_rows(3:999))
pressure_sheet <- read_excel("./raw/DPSIR/DPSIR_analysis.xlsx", sheet = "Pressure", range = cell_rows(3:999))
state_sheet <- read_excel("./raw/DPSIR/DPSIR_analysis.xlsx", sheet = "State", range = cell_rows(3:999))
impact_sheet <- read_excel("./raw/DPSIR/DPSIR_analysis.xlsx", sheet = "Impact", range = cell_rows(3:999))
response_sheet <- read_excel("./raw/DPSIR/DPSIR_analysis.xlsx", sheet = "Response", range = cell_rows(3:999))
drivers <- c(
"Population", "Low natural water availability", "Economic growth",
"Inefficient irrigation system", "Siltation", "Snowpack reduction", "Rainfall seasonality changes",
"Aridification", "Drought frequency", "Temperature increase", "Sea level rise"
)
pressures <- c(
"Tourism", "Agri water use", "Ecosystem water demand", "Total water use",
"Domestic water demand", "Crop change/intensification", "Urbanization", "Mining",
"Industrial water use", "Livestock water use", "Virtual water trade", "Aquaculture",
"Forestry", "Horticulture"
)
states <- c(
"Water use per capita", "GW depletion", "Contamination",
"Overallocation of surface water", "Low water storage capacity", "Salinization"
)
impacts <- c(
"Fallowing acreage", "Subsidence", "Reduced hydroelectricity production", "Damage to ecosystems",
"Reduced food production", "Conflict", "Health", "Costs (pumping/energy)", "High GHG emissions",
"Water collection", "Migration"
)
responses <- c(
"RGW (+)", "URGW (-)", "WI (+)", "WI (-)", "IWUE (+)", "IWUE (-)", "WC (+)", "WC(-)", "WRe (+)",
"WRe (-)", "DC (+)", "DC (-)", "WP (+)", "WP (-)", "DP (+)", "DP(-)", "Wri (+)", "Wri (-)",
"SRP (+)", "SRP (-)", "GTW (+)", "UGTW (-)", "PT (+)", "PT (-)"
)
hotspots_list <- as.list(unique(read.xlsx("./raw/DPSIR/DPSIR_analysis.xlsx", "Driver", colIndex=2)))
hotspots_list
hotspots_list <- rm.na(as.list(unique(read.xlsx("./raw/DPSIR/DPSIR_analysis.xlsx", "Driver", colIndex=2))))
hotspots_list <- hotspots_list[!na.rm(hotspots_list)]
hotspots_list <- hotspots_list[!rm.na(hotspots_list)]
hotspots_list <- hotspots_list[!na.rm(hotspots_list)]
hotspots_list <- as.list(unique(read.xlsx("./raw/DPSIR/DPSIR_analysis.xlsx", "Driver", colIndex=2)))
hotspots_list <- hotspots_list[!na.rm(hotspots_list)]
class(hotspots_list)
hotspots_list <- hotspots_list[-c(1,2)]
hotspots_list
hotspots_list <- as.list(unique(read.xlsx("./raw/DPSIR/DPSIR_analysis.xlsx", "Driver", colIndex=2)))
hotspots_list <- hotspots_list[-c(1,2)]
hotspots_list
hotspots_list <- hotspots_list[hotspots_list != NA]
hotspots_list <- as.list(unique(read.xlsx("./raw/DPSIR/DPSIR_analysis.xlsx", "Driver", colIndex=2)))
hotspots_list <- hotspots_list[hotspots_list != NA]
hotspots_list <- as.list(unique(read.xlsx("./raw/DPSIR/DPSIR_analysis.xlsx", "Driver", colIndex=2)))
hotspots_list <- hotspots_list[hotspots_list != "Hotspot"]
hotspots_list
hotspots_list <- as.list(unique(read.xlsx("./raw/DPSIR/DPSIR_analysis.xlsx", "Driver", colIndex=2, rowIndex = 4:)))
hotspots_list <- as.list(unique(read.xlsx("./raw/DPSIR/DPSIR_analysis.xlsx", "Driver", colIndex=2, rowIndex = 4:999)))
hotspots_list
View(hotspots_list)
hotspots_list <- as.list(unique(read.xlsx("./raw/DPSIR/DPSIR_analysis.xlsx", "Driver", colIndex=2, rowIndex = 3:999)))
View(hotspots_list)
hotspots_list
sheet = driver_sheet
indicator_list = drivers
indicator_name_string_singular = "driver"
ndicator_name_string_plural = "drivers"
indicator_name_string_plural = "drivers"
df <- data.frame()
region = "California"
sheet_region <- sheet[sheet$Hotspot == region, ]
col_region <- sheet_region[, indicator_list]
col_region[is.na(col_region)] <- 0.0
values <- unname(colSums(col_region[, indicator_list]))
DPSIR <- indicator_name_string_singular
df_region <- cbind(region, DPSIR, indicator_list, data.frame(values))
names(df_region)[names(df_region) == "indicator_list"] <- "indicator"
df <- rbind(df, df_region)
View(df)
df <- data.frame()
df <- rbind(df, df_region)
region = "Mexico"
sheet_region <- sheet[sheet$Hotspot == region, ]
col_region <- sheet_region[, indicator_list]
col_region[is.na(col_region)] <- 0.0
values <- unname(colSums(col_region[, indicator_list]))
DPSIR <- indicator_name_string_singular
df_region <- cbind(region, DPSIR, indicator_list, data.frame(values))
names(df_region)[names(df_region) == "indicator_list"] <- "indicator"
df <- rbind(df, df_region)
View(df)
### Functions ###
obtain_indicator <- function(sheet, indicator_list, indicator_name_string_singular, indicator_name_string_plural, hotspots_list) {
df <- data.frame()
for (region in hotspots_list){
sheet_region <- sheet[sheet$Hotspot == region, ]
col_region <- sheet_region[, indicator_list]
col_region[is.na(col_region)] <- 0.0
values <- unname(colSums(col_region[, indicator_list]))
DPSIR <- indicator_name_string_singular
df_region <- cbind(region, DPSIR, indicator_list, data.frame(values))
names(df_region)[names(df_region) == "indicator_list"] <- "indicator"
df <- rbind(df, df_region)
}
return(df)
}
df_driver <- obtain_indicator(driver_sheet, drivers, "driver", "drivers", hotspots_list)
hotspots_list
for (region in hotspots_list){print(region)}
for (i in 1:length(hotspots_list)){print(i)}
I=1
i=1
for (region in hotspots_list){
print(i)
print(region)
i=i+1
}
class(hotspots_list)
hotspots_list[1]
hotspots_list[[1]]
View(hotspots_list)
hotspots_list <- c(unique(read.xlsx("./raw/DPSIR/DPSIR_analysis.xlsx", "Driver", colIndex=2, rowIndex = 3:999)))
hostpots_list
hotpots_list
hotspots_list
i=1
for (region in hotspots_list){
print(i)
print(region)
i=i+1
}
hotspots_list[1]
hotspots_list[[1]]
class(unique(read.xlsx("./raw/DPSIR/DPSIR_analysis.xlsx", "Driver", colIndex=2, rowIndex = 3:999)))
unique(read.xlsx("./raw/DPSIR/DPSIR_analysis.xlsx", "Driver", colIndex=2, rowIndex = 3:999))
hotspots_list <- unique(read.xlsx("./raw/DPSIR/DPSIR_analysis.xlsx", "Driver", colIndex=2, rowIndex = 3:999))
hotspots_list <- hotspots_list$Hotspot
hotspots_list
for (region in hotspots_list){
print(i)
print(region)
i=i+1
}
### Functions ###
obtain_indicator <- function(sheet, indicator_list, indicator_name_string_singular, indicator_name_string_plural, hotspots_list) {
df <- data.frame()
for (region in hotspots_list){
sheet_region <- sheet[sheet$Hotspot == region, ]
col_region <- sheet_region[, indicator_list]
col_region[is.na(col_region)] <- 0.0
values <- unname(colSums(col_region[, indicator_list]))
DPSIR <- indicator_name_string_singular
df_region <- cbind(region, DPSIR, indicator_list, data.frame(values))
names(df_region)[names(df_region) == "indicator_list"] <- "indicator"
df <- rbind(df, df_region)
}
return(df)
}
df_driver <- obtain_indicator(driver_sheet, drivers, "driver", "drivers", hotspots_list)
View(df_driver)
df_driver <- obtain_indicator(driver_sheet, drivers, "driver", "drivers", hotspots_list)
df_pressure <- obtain_indicator(pressure_sheet, pressures, "pressure", "pressures", hotspots_list)
df_state <- obtain_indicator(state_sheet, states, "state", "states", hotspots_list)
df_impact <- obtain_indicator(impact_sheet, impacts, "impact", "impacts", hotspots_list)
df_response <- obtain_indicator(response_sheet, responses, "response", "responses", hotspots_list)
df_DPSIR <- rbind(df_driver, df_pressure, df_state, df_impact, df_response)
View(df_DPSIR)
library(ggsubplot)
library(rgdal)
library(ggplot2)
library(rgeos)
library(maptools)
library(grid)
library(gridExtra)
map.det<- readOGR(dsn="c:/swissBOUNDARIES3D/V200/SHAPEFILE_LV03", layer="VECTOR200_KANTONSGEBIET")
install.packages("rgeos")
library(rgeos)
map.det<- readOGR(dsn="c:/swissBOUNDARIES3D/V200/SHAPEFILE_LV03", layer="VECTOR200_KANTONSGEBIET")
install.packages("rgdal")
map.det<- readOGR(dsn="c:/swissBOUNDARIES3D/V200/SHAPEFILE_LV03", layer="VECTOR200_KANTONSGEBIET")
library(rgdal)
map.det<- readOGR(dsn="c:/swissBOUNDARIES3D/V200/SHAPEFILE_LV03", layer="VECTOR200_KANTONSGEBIET")
library(sf)
map.det<- readOGR(dsn="c:/swissBOUNDARIES3D/V200/SHAPEFILE_LV03", layer="VECTOR200_KANTONSGEBIET")
plot(shp_list)
plot(shp_list[[1]])
# Merge polygons by ID
map.test <- unionSpatialPolygons(shp_list[[2]])
install.packages("maptools")
library(maptools)
# Merge polygons by ID
map.test <- unionSpatialPolygons(shp_list[[2]])
shp_list[[1]]
shp_list$class[[1]]
shp_list[[1]]$watprovID
# Merge polygons by ID
map.test <- unionSpatialPolygons(shp_list[[2]], shp_list[[2]]$watprovID)
map.test
plot(map.test)
#get centroids
map.test.centroids <- gCentroid(map.test, byid=T)
### Reading Data ###
# shapefiles
setwd("C:/Users/5738091/Documents/2022_PhD/")
shp <- st_read("Data/Water_provinces/Hotspot_Shapefiles/California.shp")
ff <- list.files("Data/Water_provinces/Hotspot_Shapefiles/", pattern="\\.shp$", full.names=T)
shp_list <- lapply(ff, shapefile)
hotspots <- c("Irrawaddy", "California", "ChaoPhraya", "Chile", "China", "Euphrates", "Ganges", "Indus", "Japan", "Java", "Jordan",
"Mekong", "Mexico", "MurrayDarling", "Nile", "Rhine", "Spain", "Sudan", "USHighPlains")
for (i in 1:length(shp_list)){
shp_list[[i]]$hotspot <- hotspots[i]
}
# Merge polygons by ID
map.test <- unionSpatialPolygons(shp_list[[2]], shp_list[[2]]$watprovID)
#get centroids
map.test.centroids <- gCentroid(map.test, byid=T)
View(map.test.centroids)
plot(map.test.centroids)
# Merge polygons by ID
map.test <- unionSpatialPolygons(shp_list[[2]], shp_list[[2]]$COUNTRY)
plot(map.test)
View(shp_list)
# Merge polygons by ID
map.test <- unionSpatialPolygons(shp_list[[2]], shp_list[[2]]$hotspot)
### Reading Data ###
# shapefiles
setwd("C:/Users/5738091/Documents/2022_PhD/")
shp <- st_read("Data/Water_provinces/Hotspot_Shapefiles/California.shp")
ff <- list.files("Data/Water_provinces/Hotspot_Shapefiles/", pattern="\\.shp$", full.names=T)
shp_list <- lapply(ff, shapefile)
hotspots <- c("Irrawaddy", "California", "ChaoPhraya", "Chile", "China", "Euphrates", "Ganges", "Indus", "Japan", "Java", "Jordan",
"Mekong", "Mexico", "MurrayDarling", "Nile", "Rhine", "Spain", "Sudan", "USHighPlains")
for (i in 1:length(shp_list)){
shp_list[[i]]$hotspot <- hotspots[i]
shp_list[[i]] <- unionSpatialPolygons(shp_list[[2]], shp_list[[2]]$hotspot)
}
### Reading Data ###
# shapefiles
setwd("C:/Users/5738091/Documents/2022_PhD/")
shp <- st_read("Data/Water_provinces/Hotspot_Shapefiles/California.shp")
ff <- list.files("Data/Water_provinces/Hotspot_Shapefiles/", pattern="\\.shp$", full.names=T)
shp_list <- lapply(ff, shapefile)
hotspots <- c("Irrawaddy", "California", "ChaoPhraya", "Chile", "China", "Euphrates", "Ganges", "Indus", "Japan", "Java", "Jordan",
"Mekong", "Mexico", "MurrayDarling", "Nile", "Rhine", "Spain", "Sudan", "USHighPlains")
for (i in 1:length(shp_list)){
shp_list[[i]]$hotspot <- hotspots[i]
shp_list[[i]] <- unionSpatialPolygons(shp_list[[i]], shp_list[[i]]$hotspot)
}
plot(shp_list[[2]])
plot(shp_list[[3]])
plot(shp_list[[4]])
plot(shp_list[[5]])
plot(shp_list[[6]])
plot(shp_list[[7]])
warnings()
# Merge polygons by ID
map.test <- unionSpatialPolygons(shp_list[[2]], shp_list[[2]]$hotspot)
map.test <- shp_list[[2]]
#get centroids
map.test.centroids <- gCentroid(map.test, byid=T)
plot(map.test.centroids)
map.test.centroids <- as.data.frame(map.test.centroids)
View(map.test.centroids)
map.test.centroids$OBJECTID <- row.names(map.test.centroids)
View(map.test.centroids)
#create df for ggplot
kt_geom <- fortify(map.kt, region="OBJECTID")
#create df for ggplot
kt_geom <- fortify(map.test, region="OBJECTID")
View(kt_geom)
plot(kt_geom)
#Plot map
map.test <- ggplot(kt_geom)+
geom_polygon(aes(long, lat, group=group), fill="white")+
coord_fixed()+
geom_path(color="gray48", mapping=aes(long, lat, group=group), size=0.2)+
geom_point(data=map.test.centroids, aes(x=x, y=y), size=2, alpha=6/10)
map.test
#random data
set.seed(1)
geo_data <- data.frame(who=rep(c(1:length(map.kt$OBJECTID)), each=2),
value=as.numeric(sample(1:100, length(map.kt$OBJECTID)*2, replace=T)),
id=rep(c(1:length(map.kt$OBJECTID)), 2))
geo_data <- data.frame(who=rep(c(1:length(map.test$OBJECTID)), each=2),
value=as.numeric(sample(1:100, length(map.test$OBJECTID)*2, replace=T)),
id=rep(c(1:length(map.test$OBJECTID)), 2))
map.test
geo_data <- data.frame(who= "California", ),
geo_data <- data.frame(who= "California"),
geo_data <- data.frame(who= c("California"),
value=as.numeric(sample(1:100, 2, replace=T)),
id=rep(c(1:2), 2))
View(geo_data)
geo_data <- data.frame(who= c("California"),
value=as.numeric(sample(1:100, 2, replace=T)),
id=rep(c(1:4), 2))
geo_data <- data.frame(who= c("California"),
value=as.numeric(sample(1:100, 2, replace=T)),
id=rep(c(1:2), 2))
map.test <- shp_list
#get centroids
map.test.centroids <- gCentroid(map.test, byid=T)
#get centroids
map.test.centroids <- data.frame()
#get centroids
map.test.centroids <- data.frame()
for (i in length(shp_list)){
centroids <- gCentroid(map.test[[i]], byid=T)
map.test.centroids <- rbind(map.test.centroids, centroids)
}
for (i in 1:length(shp_list)){
centroids <- gCentroid(map.test[[i]], byid=T)
map.test.centroids <- rbind(map.test.centroids, centroids)
}
i = 2
centroids <- gCentroid(map.test[[i]], byid=T)
map.test.centroids <- rbind(map.test.centroids, centroids)
centroids
#get centroids
map.test.centroids <- data.frame()
for (i in 1:length(shp_list)){
centroids <- gCentroid(map.test[[i]], byid=T)
centroids <- as.data.frame(centroids)
centroids$OBJECTID <- row.names(centroids)
map.test.centroids <- rbind(map.test.centroids, centroids)
}
View(map.test.centroids)
map.test[[2]]
View(map.test)
#TODO #create df for ggplot
kt_geom <- fortify(map.test, region="OBJECTID")
#Plot map
map.test <- ggplot(kt_geom)+
geom_polygon(aes(long, lat, group=group), fill="white")+
coord_fixed()+
geom_path(color="gray48", mapping=aes(long, lat, group=group), size=0.2)+
geom_point(data=map.test.centroids, aes(x=x, y=y), size=2, alpha=6/10)
map.test
View(kt_geom)
#TODO #create df for ggplot
kt_geom <- fortify(map.test[[2]], region="OBJECTID")
View(kt_geom)
map.test <- shp_list[[2]]
kt_geom <- fortify(map.test, region="OBJECTID")
View(map.test)
map.test <- shp_list
View(map.test)
map_test[[2]]
map.test[[2]]
kt_geom <- fortify(map.test, region="OBJECTID")
map.test <- shp_list[[2]]
kt_geom <- fortify(map.test, region="OBJECTID")
map.test <- shp_list
kt_geom <- fortify(map.test[[2]], region="OBJECTID")
View(kt_geom)
#get centroids
map.test.centroids <- data.frame()
for (i in 1:length(shp_list)){
centroids <- gCentroid(map.test[[i]], byid=T)
centroids <- as.data.frame(centroids)
centroids$OBJECTID <- row.names(centroids)
map.test.centroids <- rbind(map.test.centroids, centroids)
}
#create df for ggplot
kt_geom <- data.frame()
for (i in 1:length(shp_list)){
kt_geom_hotspot <- fortify(map.test[[i]], region="OBJECTID")
kt_geom <- rbind(kt_geom, kt_geom_hotspot)
}
View(kt_geom)
#Plot map
map.test <- ggplot(kt_geom)+
geom_polygon(aes(long, lat, group=group), fill="white")+
coord_fixed()+
geom_path(color="gray48", mapping=aes(long, lat, group=group), size=0.2)+
geom_point(data=map.test.centroids, aes(x=x, y=y), size=2, alpha=6/10)
map.test
world <- map_data("world")
world <- map_data("world")
ggplot() +
geom_map(data = world, map = world, aes(long, lat, map_id = region))
ggplot() +
geom_map(data = world, map = world, aes(long, lat, map_id = region),
color = "black", fill = "lightgray", size = 0.1)
ggplot() +
geom_map(data = world, map = world, aes(long, lat, map_id = region),
color = "black", fill = "lightgray", size = 0.1) +
theme_ipsum()
ggplot() +
geom_map(data = world, map = world, aes(long, lat, map_id = region),
color = "black", fill = "lightgray", size = 0.1) +
theme_bw()
ggplot() +
geom_map(data = world, map = world, aes(long, lat, map_id = region),
color = "black", fill = "lightgray", size = 0.1) +
theme_gray()
ggplot() +
geom_map(data = world, map = world, aes(long, lat, map_id = region),
color = "black", fill = "lightgray", size = 0.1) +
theme_bw()
ggplot() +
geom_map(data = world, map = world, aes(long, lat, map_id = region),
color = "black", fill = "lightgray", size = 0.1) +
theme_bw(panel.border = element_blank())
ggplot() +
geom_map(data = world, map = world, aes(long, lat, map_id = region),
color = "black", fill = "lightgray", size = 0.1) +
theme(panel.border = element_blank())
ggplot() +
geom_map(data = world, map = world, aes(long, lat, map_id = region),
color = "black", fill = "lightgray", size = 0.1) +
theme(panel.border = element_blank(). panel.background = element_blank())
ggplot() +
geom_map(data = world, map = world, aes(long, lat, map_id = region),
color = "black", fill = "lightgray", size = 0.1) +
theme(panel.border = element_blank(), panel.background = element_blank())
ggplot() +
geom_map(data = world, map = world, aes(long, lat, map_id = region),
color = "black", fill = "lightgray", size = 0.1) +
theme(panel.background = element_blank())
ggplot() +
geom_map(data = world, map = world, aes(long, lat, map_id = region),
color = "black", fill = "lightgray", size = 0.1) +
theme(panel.background = element_blank(), panel.grid.major = "black")
ggplot() +
geom_map(data = world, map = world, aes(long, lat, map_id = region),
color = "black", fill = "lightgray", size = 0.1) +
theme(panel.background = element_blank())
ggplot() +
geom_map(data = world, map = world, aes(long, lat, map_id = region),
color = "black", fill = "lightgray", size = 0.1) +
theme(panel.background = element_blank()) +
geom_point(data=map.test.centroids, aes(x=x, y=y), size=2, alpha=6/10)
ggplot() +
geom_map(data = world, map = world, aes(long, lat, map_id = region),
color = "black", fill = "lightgray", size = 0.1) +
theme(panel.background = element_blank()) +
geom_point(data=map.test.centroids, aes(x=x, y=y), size=2, alpha=6/10, colour = "red")
